const express = require("express");
const cors = require("cors");

const PORT = process.env.PORT || 3001;

const app = express();

app.use(cors()); // Enable CORS for all routes
app.use(express.json()); // Parse incoming JSON data

//new variables 
let coordinates = []; // Empty array for coordinates
let wall_detection = "false";
let maze_complete = "false";
let traversedGrids = [];
let x = 2;
let y = 3;
let scale_factor = 2;
var modeType;
let mvmtClicks = []; // Array to store button click data
let direction = null; // Initialize the direction variable


function plot(){
      //================FOR CLIENT LAPTOP================================================
      console.log(plot);
    //GET REQUEST (Client Laptop)======================================================
    app.get("/numericalInput", (req, res) => {
      // Generate random coordinates and add them to the array
        coordinates.push({ x, y }); // Add the coordinate to the array
        console.log({ x, y });
        console.log(plot);
      
      res.json({ coordinates }); // Send the coordinates array as a single response
    });

    //POST REQUEST (Client Laptop)======================================================
    app.post("/mvmtClickPost", (req, res) => {
      const { manual_direction } = req.body; // Extract the direction from the request body
      //console.log("Button clicked:", direction); // Log the clicked direction

      mvmtClicks.unshift(manual_direction); // Add the clicked direction to the buttonClicks array
      //console.log(mvmtClicks);
      setTimeout(function(){
        //const removedElement = mvmtClicks.pop();
        //console.log(removedElement);
        //console.log("Delayed by 2 seconds");
      }, 5000);

      res.sendStatus(200); // Send a success status code (200)
    });

    app.get("/mvmtClicks", (req, res) => {
      res.json({
        mvmtClicks: mvmtClicks, // Return the buttonClicks array as JSON response
      });
    });


    app.post("/setManualMode", (req, res) => {
      const { mode } = req.body; // Extract the mode from the request body

      modeType = mode; // Update the manual mode flag
      console.log("Mode:", mode);
      res.sendStatus(200); // Send a success status code (200)
    });
  }

function GridPosition(x, y) {
    let grid_x = Math.ceil(x / scale_factor);
    let grid_y = Math.ceil(y / scale_factor);
    let grid_coordinate = "(" + String(grid_x) + "," + String(grid_y) + ")";
    return grid_coordinate;
}

function serverAlgorithm(x, y, wall_detection) {
  //add dictionary 
  let current_grid = GridPosition(x, y);
  console.log(current_grid);
  traversedGrids.push(current_grid); 
  if (wall_detection === "true" && !traversedGrids.includes(current_grid)) {
    return "doleftwall"
  } else {
    if (wall_detection === "false"){
      return "up"
    }
    else if (wall_detection === "true"){
      return "right"
    }
  }
  // Use the right variable in your code
}
  //================FOR ESP32=========================================================
    //POST REQUEST (ESP32)==============================================================

  app.post("/roverCoordinatePost", (req, res) => {

    const { received_coordinates } = req.body; // Extract the coordinates from the request body
    console.log("Received coordinates:", received_coordinates); // Log the received coordinates // You can perform any necessary processing with the coordinates here
    //coordinates.push(received_coordinates);
    //console.log("Updated Array of coordinates:", coordinates);
    
    let nums;
    if (typeof received_coordinates === 'string') {
      nums = received_coordinates.slice(1, -1).split(', ').map(Number);
    } else if (Array.isArray(received_coordinates)) {    
      nums = received_coordinates.map(Number);
    } else {
      console.log("Invalid data type for received_coordinates.");
    }    
    x = nums[0];
    y = nums[1];
    res.sendStatus(200); // Send a success status code (200)
  });


  app.post("/wallDetection", (req, res) => {
    const {received_walldetection } = req.body; // Extract the coordinates from the request body
    console.log("Received wall detection:", received_walldetection); // Log the received coordinates // You can perform any necessary processing with the coordinates here
    wall_detection = received_walldetection;   
    res.sendStatus(200); // Send a success status code (200)
  });

  app.get("/nextDirection", (req, res) => {
   if (modeType == "automatic") {
     direction = serverAlgorithm(x, y, wall_detection)
   } else {
     direction = mvmtClicks.pop();
   }
   let current_grid = GridPosition(x, y);
   console.log("CurrentGrid:", current_grid);
   res.json({ Direction: direction });
   console.log('direction:', direction);
   plot()
  });



 app.listen(PORT, () => {
   console.log(`Server listening on port ${PORT}`); // Start the server and log the port it's listening on
 });

  //app.get("/roverCoordinates", (req, res) => {
  //  res.json({
  //    roverCoordinates: roverCoordinates,
  //  });